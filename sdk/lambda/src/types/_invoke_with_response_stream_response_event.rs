// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that includes a chunk of the response payload. When the stream has ended, Lambda includes a <code>InvokeComplete</code> object.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum InvokeWithResponseStreamResponseEvent {
    /// <p>An object that's returned when the stream has ended and all the payload chunks have been returned.</p>
    InvokeComplete(crate::types::InvokeWithResponseStreamCompleteEvent),
    /// <p>A chunk of the streamed response payload.</p>
    PayloadChunk(crate::types::InvokeResponseStreamUpdate),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl InvokeWithResponseStreamResponseEvent {
    /// Tries to convert the enum instance into [`InvokeComplete`](crate::types::InvokeWithResponseStreamResponseEvent::InvokeComplete), extracting the inner [`InvokeWithResponseStreamCompleteEvent`](crate::types::InvokeWithResponseStreamCompleteEvent).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_invoke_complete(&self) -> ::std::result::Result<&crate::types::InvokeWithResponseStreamCompleteEvent, &Self> {
        if let InvokeWithResponseStreamResponseEvent::InvokeComplete(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`InvokeComplete`](crate::types::InvokeWithResponseStreamResponseEvent::InvokeComplete).
    pub fn is_invoke_complete(&self) -> bool {
        self.as_invoke_complete().is_ok()
    }
    /// Tries to convert the enum instance into [`PayloadChunk`](crate::types::InvokeWithResponseStreamResponseEvent::PayloadChunk), extracting the inner [`InvokeResponseStreamUpdate`](crate::types::InvokeResponseStreamUpdate).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_payload_chunk(&self) -> ::std::result::Result<&crate::types::InvokeResponseStreamUpdate, &Self> {
        if let InvokeWithResponseStreamResponseEvent::PayloadChunk(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`PayloadChunk`](crate::types::InvokeWithResponseStreamResponseEvent::PayloadChunk).
    pub fn is_payload_chunk(&self) -> bool {
        self.as_payload_chunk().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
