// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A response confirming that the event stream is complete.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InvokeWithResponseStreamCompleteEvent {
    /// <p>An error code.</p>
    pub error_code: ::std::option::Option<::std::string::String>,
    /// <p>The details of any returned error.</p>
    pub error_details: ::std::option::Option<::std::string::String>,
    /// <p>The last 4 KB of the execution log, which is base64-encoded.</p>
    pub log_result: ::std::option::Option<::std::string::String>,
}
impl InvokeWithResponseStreamCompleteEvent {
    /// <p>An error code.</p>
    pub fn error_code(&self) -> ::std::option::Option<&str> {
        self.error_code.as_deref()
    }
    /// <p>The details of any returned error.</p>
    pub fn error_details(&self) -> ::std::option::Option<&str> {
        self.error_details.as_deref()
    }
    /// <p>The last 4 KB of the execution log, which is base64-encoded.</p>
    pub fn log_result(&self) -> ::std::option::Option<&str> {
        self.log_result.as_deref()
    }
}
impl InvokeWithResponseStreamCompleteEvent {
    /// Creates a new builder-style object to manufacture [`InvokeWithResponseStreamCompleteEvent`](crate::types::InvokeWithResponseStreamCompleteEvent).
    pub fn builder() -> crate::types::builders::InvokeWithResponseStreamCompleteEventBuilder {
        crate::types::builders::InvokeWithResponseStreamCompleteEventBuilder::default()
    }
}

/// A builder for [`InvokeWithResponseStreamCompleteEvent`](crate::types::InvokeWithResponseStreamCompleteEvent).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct InvokeWithResponseStreamCompleteEventBuilder {
    pub(crate) error_code: ::std::option::Option<::std::string::String>,
    pub(crate) error_details: ::std::option::Option<::std::string::String>,
    pub(crate) log_result: ::std::option::Option<::std::string::String>,
}
impl InvokeWithResponseStreamCompleteEventBuilder {
    /// <p>An error code.</p>
    pub fn error_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An error code.</p>
    pub fn set_error_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_code = input;
        self
    }
    /// <p>An error code.</p>
    pub fn get_error_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_code
    }
    /// <p>The details of any returned error.</p>
    pub fn error_details(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_details = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The details of any returned error.</p>
    pub fn set_error_details(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_details = input;
        self
    }
    /// <p>The details of any returned error.</p>
    pub fn get_error_details(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_details
    }
    /// <p>The last 4 KB of the execution log, which is base64-encoded.</p>
    pub fn log_result(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.log_result = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The last 4 KB of the execution log, which is base64-encoded.</p>
    pub fn set_log_result(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.log_result = input;
        self
    }
    /// <p>The last 4 KB of the execution log, which is base64-encoded.</p>
    pub fn get_log_result(&self) -> &::std::option::Option<::std::string::String> {
        &self.log_result
    }
    /// Consumes the builder and constructs a [`InvokeWithResponseStreamCompleteEvent`](crate::types::InvokeWithResponseStreamCompleteEvent).
    pub fn build(self) -> crate::types::InvokeWithResponseStreamCompleteEvent {
        crate::types::InvokeWithResponseStreamCompleteEvent {
            error_code: self.error_code,
            error_details: self.error_details,
            log_result: self.log_result,
        }
    }
}
