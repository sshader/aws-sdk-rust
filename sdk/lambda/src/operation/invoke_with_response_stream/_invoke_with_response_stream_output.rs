// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub struct InvokeWithResponseStreamOutput {
    /// <p>For a successful request, the HTTP status code is in the 200 range. For the <code>RequestResponse</code> invocation type, this status code is 200. For the <code>DryRun</code> invocation type, this status code is 204.</p>
    pub status_code: i32,
    /// <p>The version of the function that executed. When you invoke a function with an alias, this indicates which version the alias resolved to.</p>
    pub executed_version: ::std::option::Option<::std::string::String>,
    /// <p>The stream of response payloads.</p>
    pub event_stream: crate::event_receiver::EventReceiver<
        crate::types::InvokeWithResponseStreamResponseEvent,
        crate::types::error::InvokeWithResponseStreamResponseEventError,
    >,
    /// <p>The type of data the stream is returning.</p>
    pub response_stream_content_type: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl InvokeWithResponseStreamOutput {
    /// <p>For a successful request, the HTTP status code is in the 200 range. For the <code>RequestResponse</code> invocation type, this status code is 200. For the <code>DryRun</code> invocation type, this status code is 204.</p>
    pub fn status_code(&self) -> i32 {
        self.status_code
    }
    /// <p>The version of the function that executed. When you invoke a function with an alias, this indicates which version the alias resolved to.</p>
    pub fn executed_version(&self) -> ::std::option::Option<&str> {
        self.executed_version.as_deref()
    }
    /// <p>The stream of response payloads.</p>
    pub fn event_stream(
        &self,
    ) -> &crate::event_receiver::EventReceiver<
        crate::types::InvokeWithResponseStreamResponseEvent,
        crate::types::error::InvokeWithResponseStreamResponseEventError,
    > {
        &self.event_stream
    }
    /// <p>The type of data the stream is returning.</p>
    pub fn response_stream_content_type(&self) -> ::std::option::Option<&str> {
        self.response_stream_content_type.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for InvokeWithResponseStreamOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl InvokeWithResponseStreamOutput {
    /// Creates a new builder-style object to manufacture [`InvokeWithResponseStreamOutput`](crate::operation::invoke_with_response_stream::InvokeWithResponseStreamOutput).
    pub fn builder() -> crate::operation::invoke_with_response_stream::builders::InvokeWithResponseStreamOutputBuilder {
        crate::operation::invoke_with_response_stream::builders::InvokeWithResponseStreamOutputBuilder::default()
    }
}

/// A builder for [`InvokeWithResponseStreamOutput`](crate::operation::invoke_with_response_stream::InvokeWithResponseStreamOutput).
#[non_exhaustive]
#[derive(::std::default::Default, ::std::fmt::Debug)]
pub struct InvokeWithResponseStreamOutputBuilder {
    pub(crate) status_code: ::std::option::Option<i32>,
    pub(crate) executed_version: ::std::option::Option<::std::string::String>,
    pub(crate) event_stream: ::std::option::Option<
        crate::event_receiver::EventReceiver<
            crate::types::InvokeWithResponseStreamResponseEvent,
            crate::types::error::InvokeWithResponseStreamResponseEventError,
        >,
    >,
    pub(crate) response_stream_content_type: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl InvokeWithResponseStreamOutputBuilder {
    /// <p>For a successful request, the HTTP status code is in the 200 range. For the <code>RequestResponse</code> invocation type, this status code is 200. For the <code>DryRun</code> invocation type, this status code is 204.</p>
    pub fn status_code(mut self, input: i32) -> Self {
        self.status_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>For a successful request, the HTTP status code is in the 200 range. For the <code>RequestResponse</code> invocation type, this status code is 200. For the <code>DryRun</code> invocation type, this status code is 204.</p>
    pub fn set_status_code(mut self, input: ::std::option::Option<i32>) -> Self {
        self.status_code = input;
        self
    }
    /// <p>For a successful request, the HTTP status code is in the 200 range. For the <code>RequestResponse</code> invocation type, this status code is 200. For the <code>DryRun</code> invocation type, this status code is 204.</p>
    pub fn get_status_code(&self) -> &::std::option::Option<i32> {
        &self.status_code
    }
    /// <p>The version of the function that executed. When you invoke a function with an alias, this indicates which version the alias resolved to.</p>
    pub fn executed_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.executed_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the function that executed. When you invoke a function with an alias, this indicates which version the alias resolved to.</p>
    pub fn set_executed_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.executed_version = input;
        self
    }
    /// <p>The version of the function that executed. When you invoke a function with an alias, this indicates which version the alias resolved to.</p>
    pub fn get_executed_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.executed_version
    }
    /// <p>The stream of response payloads.</p>
    pub fn event_stream(
        mut self,
        input: crate::event_receiver::EventReceiver<
            crate::types::InvokeWithResponseStreamResponseEvent,
            crate::types::error::InvokeWithResponseStreamResponseEventError,
        >,
    ) -> Self {
        self.event_stream = ::std::option::Option::Some(input);
        self
    }
    /// <p>The stream of response payloads.</p>
    pub fn set_event_stream(
        mut self,
        input: ::std::option::Option<
            crate::event_receiver::EventReceiver<
                crate::types::InvokeWithResponseStreamResponseEvent,
                crate::types::error::InvokeWithResponseStreamResponseEventError,
            >,
        >,
    ) -> Self {
        self.event_stream = input;
        self
    }
    /// <p>The stream of response payloads.</p>
    pub fn get_event_stream(
        &self,
    ) -> &::std::option::Option<
        crate::event_receiver::EventReceiver<
            crate::types::InvokeWithResponseStreamResponseEvent,
            crate::types::error::InvokeWithResponseStreamResponseEventError,
        >,
    > {
        &self.event_stream
    }
    /// <p>The type of data the stream is returning.</p>
    pub fn response_stream_content_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.response_stream_content_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of data the stream is returning.</p>
    pub fn set_response_stream_content_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.response_stream_content_type = input;
        self
    }
    /// <p>The type of data the stream is returning.</p>
    pub fn get_response_stream_content_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.response_stream_content_type
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`InvokeWithResponseStreamOutput`](crate::operation::invoke_with_response_stream::InvokeWithResponseStreamOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`event_stream`](crate::operation::invoke_with_response_stream::builders::InvokeWithResponseStreamOutputBuilder::event_stream)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::invoke_with_response_stream::InvokeWithResponseStreamOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::invoke_with_response_stream::InvokeWithResponseStreamOutput {
            status_code: self.status_code.unwrap_or_default(),
            executed_version: self.executed_version,
            event_stream: self.event_stream.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event_stream",
                    "event_stream was not specified but it is required when building InvokeWithResponseStreamOutput",
                )
            })?,
            response_stream_content_type: self.response_stream_content_type,
            _request_id: self._request_id,
        })
    }
}
